<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <!-- 
        Detect legacy projects (projects using the legacy .csproj format and packages.config).
    -->
    <PropertyGroup>
        <IsLegacyProject>false</IsLegacyProject>
        <!-- Exists function resolves paths relative to entry .csproj file -->
        <IsLegacyProject Condition="Exists('packages.config') Or
                                    Exists('$(MSBuildProjectName).packages.config') Or
                                    Exists('packages.$(MSBuildProjectName).config')">true</IsLegacyProject>
    </PropertyGroup>

    <!-- 
        .Net SDK doesn't copy native assets for .Net framework class library builds if no runtime identifier is specified. This is an issue for two
        reasons: firstly, .Net framework test projects are libraries. Secondly, assets are required when we publish libraries for use as plugins.

        By default, MSBuild never copies native assets for legacy projects. TODO Even if we add CopyToPublishDirectory to our None items, MSBuild doesn't
        copy native assets to the publish directory.

        Copy manually in these situations.
    -->
    <PropertyGroup Condition="'$(NodeJSExecutable)' == ''
                              And (('$(TargetFrameworkIdentifier)' == '.NETFramework'
                              And '$(OutputType)' == 'Library'
                              And '$(RuntimeIdentifier)' == '')
                              Or '$(IsLegacyProject)' == 'true')">
        <NodeJSExecutable Condition="'$(PlatformTarget)' == 'x64'">win-x64</NodeJSExecutable>
        <NodeJSExecutable Condition="'$(PlatformTarget)' != 'x64'">win-x86</NodeJSExecutable>
    </PropertyGroup>

    <!-- 
        If NodeJSExecutable is specified, copy manually. Note that if .Net SDK already copies native assets, this asset is copied in addition to what 
        .Net SDK copies.

        TODO Suppress default native asset copying when NodeJSExecutable is specified. This can partially be done by manipulating NativeCopyLocalItems,
        the exception is app local assets (runtime/<rid>/native/*), which don't show up in NativeCopyLocalItems.
    -->
    <ItemGroup Condition="'$(NodeJSExecutable)' != ''">
        <None Include="$(MSBuildThisFileDirectory)\..\runtimes\$(NodeJSExecutable)\native\node*"
              CopyToOutputDirectory="PreserveNewest"
              Visible="false" />
    </ItemGroup>
</Project>